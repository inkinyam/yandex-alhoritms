/*
color = [white, white, ...]  # Длина массива равна числу вершин |V|.

функция DFS(v):  # v - номер вершины
  color[v] = gray  # Вершина посещена, но ещё не обработана.
  для каждого исходящего ребра (v,w):
    возьмём вершину w
    if color[w] == white:  # Если вершина не посещена, то
      DFS(w)             # запустим обход от найденной смежной вершины.
  color[v] = black  # Теперь вершина обработана.

функция MainDFS():
  для каждого i от 0 до |V| - 1:
    # Перебираем варианты стартовых вершин, пока они существуют.
    if color[i] == white:
      DFS(i)  # Запускаем обход, стартуя с i-й вершины.
 */
let color = ["white", "white"]; // Длина массива равна числу вершин |V|.

const getOutgoingEdges = () => {
  // Получите список исходящих ребер в зависимости от способа хранения графа
};

function DFS(v) {
  // v - номер вершины
  color[v] = "gray"; // Вершина посещена, но ещё не обработана.
  let outgoingEdges = getOutgoingEdges(v);
  for (let w of outgoingEdges) {
    if (color[w] === "white") {
      // Если вершина не посещена, то
      DFS(w); // запустим обход от найденной смежной вершины.
    }
  }
  color[v] = "black"; // Теперь вершина обработана.
}

function mainDFS() {
  for (let i = 0; i < color.length; i++) {
    // Перебираем варианты стартовых вершин, пока они существуют.
    if (color[i] === "white") {
      DFS(i); // Запускаем обход, стартуя с i-й вершины.
    }
  }
}
