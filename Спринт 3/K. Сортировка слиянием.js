/*
Гоше дали задание написать красивую сортировку слиянием. Поэтому Гоше обязательно надо реализовать отдельно функцию merge и функцию merge_sort.

Функция merge принимает один массив и три целочисленных индекса: left, mid, и right. Функция сливает две отсортированные части одного и того же массива в один отсортированный массив. Первая часть массива определяется полуинтервалом 
[left,mid) массива array, а вторая часть – полуинтервалом 
[mid,right) того же массива array. Функция возвращает сливаемый массив.

Функция merge_sort принимает некоторый подмассив, который нужно отсортировать. Подмассив задаётся полуинтервалом — его началом и концом. Функция должна отсортировать передаваемый в неё подмассив, она ничего не возвращает.
Функция merge_sort разбивает полуинтервал на две половинки и рекурсивно вызывает сортировку отдельно для каждой. Затем два отсортированных массива сливаются в один с помощью merge.
Заметьте, что в функции передаются именно полуинтервалы 
[begin,end), то есть правый конец не включается. Например, если вызвать merge_sort(arr, 0, 4), где 
arr=[4,5,3,0,1,2], то будут отсортированы только первые четыре элемента, изменённый массив будет выглядеть как 
arr=[0,3,4,5,1,2].
Реализуйте эти две функции.

Формат ввода
Передаваемый в функции массив состоит из целых чисел, не превосходящих по модулю 
10^9. Длина сортируемого диапазона не превосходит 
10^5.

Вы можете ознакомиться с инструкцией по работе с Make на платформе в разделе "Начало тема «Введение в алгоритмы», урок «Оптимизация ввода и вывода»
https://github.com/Yandex-Practicum/algorithms-templates/tree/main/js/sprint3/K
*/

function merge_sort(arr, left, right) {
  if (right - left <= 1) return;
  const mid = Math.floor((left + right) / 2);

  merge_sort(arr, left, mid);
  merge_sort(arr, mid, right);
  merge(arr, left, mid, right);
}

function merge(arr, left, mid, right) {
  const result = [];

  while (left < mid && mid < right) {
    if (arr[left] <= arr[mid]) {
      result.push(arr[left]);
      left++;
    } else {
      result.push(arr[mid]);
      mid++;
    }
  }

  while (left < mid) {
    result.push(arr[left]);
    left++;
  }

  while (mid < right) {
    result.push(arr[mid]);
    mid++;
  }

  for (let i = 0; i < result.length; i++) {
    arr[left + i] = result[i];
  }

  return arr;
}

function test() {
  var a = [1, 4, 9, 2, 10, 11];
  var b = merge(a, 0, 3, 6);
  var expected = [1, 2, 4, 9, 10, 11];

  var c = [1, 4, 2, 10, 1, 2];
  merge_sort(c, 0, 6);
  expected = [1, 1, 2, 2, 4, 10];
}

var c = [1, 4, 2, 10, 1, 2];

console.log(merge_sort(c, 0, 6));
