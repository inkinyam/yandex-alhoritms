/*
Наибольшая возрастающая подпоследовательность (НВП)
Можно переформулировать задачу следующим образом: из последовательности A необходимо вычеркнуть наименьшее число элементов так, чтобы оставшиеся числа шли строго по возрастанию.
Рассмотрим несколько примеров.
Пример 1:
 A={1,2,3,4,5,6}. НВП совпадает со всей последовательностью, её длина равна 6.
Пример 2:
A={6,5,4,3,2,1}. Здесь какие бы два элемента мы ни взяли, они будут идти в порядке убывания, значит, длина НВП равна 1. 

Наибольшая общая возрастающая подпоследовательность — наивное решение
Усложним задачу: для данных последовательностей A и B требуется найти наибольшую общую возрастающую подпоследовательность (далее — НОВП). Рассмотрим пример. Даны две последовательности:
A={3,8,9,1,3,1,2,1}
B={1,3,1,2,8,9,1}
Их наибольшая общая подпоследовательность имеет длину 5 — это {1,3,1,2,1}. Попробуем выделить в общей подпоследовательности наибольшую возрастающую подпоследовательность — получим {1,2} или {1,3}. Однако в A и B есть общая возрастающая подпоследовательность большей длины — это {3,8,9}. Таким образом, найти сначала НОП, а потом выделить в ней НВП не получится. Нужна новая динамика.
Рассмотрим наивное решение, которое для последовательностей A и B длины n и m соответственно будет работать за O(n^2⋅m^2), а затем улучшим его.
Пусть dp[i][j] — это длина НОВП на префиксах (префикс последовательности A длины L — это её начало A[0:L−1]) длины i (в A) и j (в B), причём элементы на позициях i и j обязательно входят в НОВП. Из этого определения сразу следует, что A[i−1]==B[j−1]. Научимся вычислять данное состояние динамики.
Во-первых, если A[i−1] != =B[j−1], то dp[i][j]=0. В ином случае необходимо перебрать предыдущие элементы в последовательностях A и B.
*/

let n = 99; //длина последовательности А
let m = 99; //длина последовательности В
let dp = [];
// Заполняем массив нулями, так как длина НОВП в худшем случае равна нулю.
// Большую оценку без просмотра последовательностей мы не можем получить.
for (let i = 0; i < n + 1; i++) {
  dp[i] = [];
  for (let j = 0; j < m + 1; j++) {
    dp[i][j] = 0;
  }
}

for (let i = 1; i < n + 1; i++) {
  for (let j = 1; j < m + 1; j++) {
    if (A[i - 1] == B[j - 1]) {
      let maxLen = 0;
      for (let iPrev = 1; iPrev < i; iPrev++) {
        if (A[iPrev - 1] >= A[i - 1]) {
          continue;
        }
        for (let jPrev = 1; jPrev < j; jPrev++) {
          maxLen = Math.max(maxLen, dp[iPrev][jPrev]);
        }
      }
      dp[i][j] = maxLen + 1;
    }
  }
}

// Надо перебрать все пары концов НОВП, чтобы найти оптимальный ответ.
let answer = 0;
for (let i = 0; i < n + 1; i++) {
  for (let j = 0; j < m + 1; j++) {
    answer = Math.max(answer, dp[i][j]);
  }
}

//ОКОНЧАТЕЛЬНОЕ РЕШЕНИЕ
/*
Итак, мы подробно разобрали последовательное решение задачи о наибольшей общей возрастающей подпоследовательности. Оттолкнувшись от наивного подхода, мы улучшили наше решение  до O(n⋅m) с помощью пары интересных оптимизаций. */
const DPD = Array.from({ length: n + 1 }, () => Array(m + 1).fill(0));
for (let i = 1; i <= n; i++) {
  let maxVal = 0;
  for (let j = 1; j <= m; j++) {
    DPD[i][j] = DPD[i - 1][j];
    if (A[i - 1] === B[j - 1]) {
      DPD[i][j] = Math.max(DPD[i][j], maxVal + 1);
    }
    if (B[j - 1] < A[i - 1]) {
      maxVal = Math.max(maxVal, DPD[i - 1][j]);
    }
  }
}
